
const SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbxJ61Jm0sx78sdh4t0dQQEhcu1gxClFtOT1J591xm2dfT1maRp9YO6tyqdfFqS5nEqi/exec'; 


// –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
const wordEl = document.getElementById('word');
const translationEl = document.getElementById('translation');
const cardContainer = document.querySelector('.card');
const showAnswerBtn = document.getElementById('show-answer-btn');
const answerButtons = document.getElementById('answer-buttons');
const correctBtn = document.getElementById('correct-btn');
const incorrectBtn = document.getElementById('incorrect-btn');
const messageArea = document.getElementById('message-area');

let words = [];
let currentWord = null;

// --- –õ–æ–≥–∏–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ SM-2 ---
function calculateSM2(word, quality) {
    // quality: 5 –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, 1 –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ
    let { repetition, interval, efactor } = word;

    if (quality < 3) { // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        repetition = 0;
        interval = 1;
    } else {
        repetition += 1;
        if (repetition === 1) {
            interval = 1;
        } else if (repetition === 2) {
            interval = 6;
        } else {
            interval = Math.round(interval * efactor);
        }
    }

    efactor = efactor + (0.1 - (5 - quality) * (0.08 + (5 - quality) * 0.02));
    if (efactor < 1.3) {
        efactor = 1.3;
    }

    const newDueDate = new Date();
    newDueDate.setDate(newDueDate.getDate() + interval);

    return {
        ...word,
        repetition,
        interval,
        efactor,
        dueDate: newDueDate.toISOString().split('T')[0]
    };
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º ---
async function fetchWords() {
    try {
        const response = await fetch(SCRIPT_URL);
        words = await response.json();
        if (words.length > 0) {
            displayNextCard();
        } else {
            messageArea.textContent = '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω—ã.';
            wordEl.textContent = 'üéâ';
            cardContainer.classList.remove('is-flipped');
            showAnswerBtn.classList.add('hidden');
        }
    } catch (error) {
        messageArea.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –≤ script.js –∏ –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ.';
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}

function displayNextCard() {
    if (words.length === 0) {
        fetchWords();
        return;
    }
    
    currentWord = words.shift();
    // –¢–µ–ø–µ—Ä—å –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–π —Å—Ç–æ—Ä–æ–Ω–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –±—É–¥–µ—Ç —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ
    wordEl.textContent = currentWord.russian;
    // –ê –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π, –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏, ‚Äî –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
    translationEl.textContent = currentWord.english;
    
    cardContainer.classList.remove('is-flipped');
    showAnswerBtn.classList.remove('hidden');
    answerButtons.classList.add('hidden');
    messageArea.textContent = `–û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${words.length + 1}`;
}

async function updateWord(word, quality) {
    const updatedWord = calculateSM2(word, quality);
    
    try {
        await fetch(SCRIPT_URL, {
            method: 'POST',
            mode: 'no-cors', // –í–∞–∂–Ω–æ –¥–ª—è Apps Script
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updatedWord)
        });
        displayNextCard();
    } catch (error) {
        messageArea.textContent = '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.';
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', error);
    }
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
showAnswerBtn.addEventListener('click', () => {
    cardContainer.classList.add('is-flipped');
    showAnswerBtn.classList.add('hidden');
    answerButtons.classList.remove('hidden');
});

correctBtn.addEventListener('click', () => {
    updateWord(currentWord, 5); // 5 - "–æ—Ç–ª–∏—á–Ω–æ –ø–æ–º–Ω—é"
});

incorrectBtn.addEventListener('click', () => {
    updateWord(currentWord, 1); // 1 - "—Å–æ–≤—Å–µ–º –Ω–µ –ø–æ–º–Ω—é"
});

// --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
fetchWords();
